ext {
//    var = signingConfigs.production
}
apply plugin: 'com.android.application'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'io.fabric'
//apply plugin: 'com.google.firebase.firebase-perf'

def paymentserverurl
def gplaysubscriptionid1
def gplaylicensekey
def MS_AppCenterKey

def AdMobAppID
def AdMobBanner1ID
def AdMobIntID

Properties properties = new Properties()

def lp = new File('smsdrive.local.properties')
if (!lp.exists()) {
    new URL(System.getenv('local.properties.url')).withInputStream { i ->
        lp.withOutputStream {
            it << i
        }
    }
    project.logger.info('Downloaded local.properties file')
    properties.load(project.rootProject.file('smsdrive.local.properties').newDataInputStream())
    paymentserverurl = properties.getProperty('paymentserverurl')
    gplaysubscriptionid1 = properties.getProperty('gplaysubscriptionid1')
    gplaylicensekey = properties.getProperty('g.license.key')
    MS_AppCenterKey = properties.getProperty('msappcenter')
    AdMobAppID= properties.getProperty('admobappid')
    AdMobBanner1ID= properties.getProperty('admobbanner1')
    AdMobIntID= properties.getProperty('admobinitid')

} else {
    project.logger.info('Located local.properties file')

    properties.load(project.rootProject.file('smsdrive.local.properties').newDataInputStream())
    paymentserverurl = properties.getProperty('paymentserverurl')
    gplaysubscriptionid1 = properties.getProperty('gplaysubscriptionid1')
    gplaylicensekey = properties.getProperty('g.license.key')
    MS_AppCenterKey = properties.getProperty('msappcenter')
    AdMobAppID= properties.getProperty('admobappid')
    AdMobBanner1ID= properties.getProperty('admobbanner1')
    AdMobIntID= properties.getProperty('admobinitid')

}
//def keypassword = properties.getProperty('sign.key.password')


ext.keypassword = System.getenv('sign.key.password')

ext.keyalias = System.getenv('sign.key.alias')

ext.keypath = System.getenv('sign.key.path')


//ext.paymentserverurl = System.getenv('paymentserverurl')

def f = new File('app/google-services.json')
if (!f.exists()) {
    new URL(System.getenv('google.services.json')).withInputStream { i ->
        f.withOutputStream {
            it << i
        }
    }
    project.logger.info('Downloaded google-services.json')
} else {
    project.logger.info('google-services.json already exists')
}
/*
def kk = new File('key')
if (!kk.exists()) {
    new URL(System.getenv('key.url')).withInputStream { i ->
        kk.withOutputStream {
            it << i
        }
    }
    project.logger.info('Downloaded key')
keypath=kk
} */

def AppVersionName = "0.0.9"

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    compileSdkVersion 29
    buildToolsVersion "29.0.3"
    /*signingConfigs {
                   release {
                       storeFile keypath
                       storePassword keypassword
                       keyAlias = keyalias
                       keyPassword keypassword
					   
					   // Optional, specify signing versions used
       v1SigningEnabled true
       v2SigningEnabled true
                   }
               }
               */

    defaultConfig {


        applicationId "devesh.ephrine.backup.sms"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 30
        versionName "" + AppVersionName + " Beta Version"
        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true


        vectorDrawables.useSupportLibrary = true

        buildConfigField "String", "GLicenseKey", "\"" + gplaylicensekey + "\""

        buildConfigField "String", "Heroku_Server_URL", "\"" + paymentserverurl + "\""

        buildConfigField "String", "Google_Play_Subscription_ID1", "\"" + gplaysubscriptionid1 + "\""

        buildConfigField "String", "MS_AppCenter_Key", "\"" + MS_AppCenterKey + "\""

        resValue "string", "AdMob_AppId", "\"" + AdMobAppID + "\""

        resValue "string", "AdMob_BannerId1", "\"" + AdMobBanner1ID + "\""

        resValue "string", "AdMob_InitId", "\"" + AdMobIntID + "\""

        resValue "string", "AppVersionCode", "\"" + versionCode + "\""

        //     resValue "string", "AppVersionName", "\"" + versionName + "\""
        //    signingConfig signingConfigs.release

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        "room.schemaLocation"  : "$projectDir/schemas".toString(),
                        "room.incremental"     : "true",
                        "room.expandProjection": "true"]
            }
        }

    }


    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
//signingConfig signingConfigs.release

        }
    }


    flavorDimensions "appstore"
    productFlavors {
        master {
            dimension "appstore"
            versionName "" + AppVersionName + " Beta Version"
            //  applicationId "devesh.ephrine.backup.sms"
            resValue "string", "AppFlavour", "\"" + "master" + "\""
            resValue "string", "AppVersionName", "\"" + versionName + "\""
        }
        galaxy {
            dimension "appstore"
            versionName "" + AppVersionName + " Beta (Samsung)"
            //     applicationId "devesh.ephrine.backup.sms"
            resValue "string", "AppFlavour", "\"" + "galaxy" + "\""
            resValue "string", "AppVersionName", "\"" + versionName + "\""
            // archivesBaseName = "galaxy-app"

        }
        huawei {
            dimension "appstore"
            versionName "" + AppVersionName + " Beta (Huawei)"
            applicationId "devesh.ephrine.backup.sms.huawei"
            resValue "string", "AppFlavour", "\"" + "huawei" + "\""
            resValue "string", "AppVersionName", "\"" + versionName + "\""
        }

    }


}
dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:+'
    implementation 'androidx.constraintlayout:constraintlayout:+'

    implementation 'com.google.firebase:firebase-analytics:+'
    implementation 'com.google.firebase:firebase-database:+'
    implementation 'com.google.firebase:firebase-storage:+'
    implementation 'com.google.firebase:firebase-auth:+'
    implementation 'com.firebaseui:firebase-ui-auth:+'
    implementation 'com.crashlytics.sdk.android:crashlytics:+'
    implementation 'com.google.firebase:firebase-config:+'
    implementation 'com.google.firebase:firebase-functions:+'
    implementation 'com.google.firebase:firebase-messaging:+'
    // implementation 'com.google.firebase:firebase-inappmessaging-display:+'
    implementation 'com.google.android.gms:play-services-ads:+'
  //  implementation 'com.google.firebase:firebase-ads:+'
// Add the dependency for the Performance Monitoring library
    //  implementation 'com.google.firebase:firebase-perf:19.0.6'
    //  implementation 'androidx.work:work-runtime:2.4.0-alpha01'


    implementation 'androidx.preference:preference:+'

    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:+'
    androidTestImplementation 'androidx.test.espresso:espresso-core:+'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.cardview:cardview:+'
    //  implementation 'com.google.code.gson:gson:2.8.6'

    //Google in-app Billing
    implementation 'com.anjlab.android.iab.v3:library:+'

    implementation 'com.amulyakhare:com.amulyakhare.textdrawable:1.0.1'

    implementation 'com.lifeofcoding:cacheutilslibrary:1.1.0@aar'
    implementation 'com.google.code.gson:gson:+'
    implementation 'commons-io:commons-io:+'

    implementation 'com.google.android.material:material:+'

    //Runtime Permissions
    //implementation 'com.karumi:dexter:+'
    implementation 'com.nabinbhandari.android:permissions:+'

    implementation "com.airbnb.android:lottie:+"

    implementation 'androidx.multidex:multidex:+'

    // Stripe Android SDK
    implementation 'com.stripe:stripe-android:+'

    // OkHttp & GSON
    implementation 'com.squareup.okhttp3:okhttp:+'
    implementation 'com.google.code.gson:gson:+'

    //Zip File
//    implementation group: 'net.lingala.zip4j', name: 'zip4j', version: '2.5.1'
// https://mvnrepository.com/artifact/net.sf.jsignature.io-tools/easystream
    //  implementation group: 'net.sf.jsignature.io-tools', name: 'easystream', version: '1.2.15'

//Room Library
    implementation "androidx.room:room-runtime:2.2.5"
    annotationProcessor "androidx.room:room-compiler:2.2.5"
    // For Kotlin use kapt instead of annotationProcessor

    // optional - Kotlin Extensions and Coroutines support for Room
    implementation "androidx.room:room-ktx:2.2.5"

    // optional - RxJava support for Room
    implementation "androidx.room:room-rxjava2:2.2.5"

    // optional - Guava support for Room, including Optional and ListenableFuture
    implementation "androidx.room:room-guava:+"

    // Test helpers
    testImplementation "androidx.room:room-testing:+"

    // MS AppCenter
    implementation "com.microsoft.appcenter:appcenter-analytics:+"
    implementation "com.microsoft.appcenter:appcenter-crashes:+"

    //Samsung Galaxy In-App-purchases
    galaxyImplementation project(':IAP6Helper')

    huaweiImplementation 'com.huawei.hms:iap:4.0.0.300'

    //Chrome Custom Tab
    implementation 'androidx.browser:browser:+'

    implementation 'com.google.guava:guava:27.0.1-android'

    implementation project(':nativetemplates')


}
